service: pet-project

provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  region: ap-northeast-1
  memorySize: 1024
  timeout: 20

package:
  excludeDevDependencies: true
  exclude:
    - .git/**
    - .serverless/**
    - tests/**
    - docs/**
    - .venv/**
    - .vscode/**
    - node_modules/**

layers:
  dependencies:
    path: layer
    compatibleRuntimes:
      - nodejs20.x

functions:
  signup:
    handler: src/server/controller/authController.signup
    layers:
      - { Ref: DependenciesLambdaLayer }
    events:
      - http:
          path: signup
          method: post
          cors: true

  login:
    handler: src/server/controller/authController.login
    layers:
      - { Ref: DependenciesLambdaLayer }
    events:
      - http:
          path: login
          method: post
          cors: true

  # dashboard:
  #   handler: src/server/controller/authController.login
  #   events:
  #     - http:
  #         path: login
  #         method: post
  #         cors: true

  upload:
    handler: src/server/controller/PostController.upload
    layers:
      - { Ref: DependenciesLambdaLayer }
    events:
      - http:
          path: upload
          method: post
          cors: true

  listByUserEmail:
    handler: src/server/controller/PostController.listByUserEmail
    layers:
      - { Ref: DependenciesLambdaLayer }
    events:
      - http:
          path: listByUserEmail
          method: get
          cors: true

  download:
    handler: src/server/controller/PostController.download
    layers:
      - { Ref: DependenciesLambdaLayer }
    events:
      - http:
          path: download
          method: get
          cors: true

  findbyPostID:
    handler: src/server/controller/PostController.findbyPostID
    layers:
      - { Ref: DependenciesLambdaLayer }
    events:
      - http:
          path: findbyPostID
          method: get
          cors: true

  getFileUrl:
    handler: src/server/controller/PostController.getFileUrl
    layers:
      - { Ref: DependenciesLambdaLayer }
    events:
      - http:
          path: getFileUrl
          method: get
          cors: true

# Create DynamoDB
resources:
  Resources:
    # Tạo S3 bucket
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: linh-s3-bucket
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
              AllowedHeaders:
                - "*"

    # Bảng Users
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UsersTable
        AttributeDefinitions:
          - AttributeName: "email"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "email"
            KeyType: "HASH" # Primary Key
        # GlobalSecondaryIndexes:
        #   - IndexName: "EmailIndex"
        #     KeySchema:
        #       - AttributeName: "email"
        #         KeyType: "HASH"
        #     Projection:
        #       ProjectionType: "ALL"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    # Bảng Posts
    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: PostsTable
        AttributeDefinitions:
          - AttributeName: "postId"
            AttributeType: "S"
          # - AttributeName: "user_email"
          #   AttributeType: "S"
        KeySchema:
          - AttributeName: "postId"
            KeyType: "HASH" # Primary Key
        # GlobalSecondaryIndexes:
        #   - IndexName: "UserEmailIndex"
        #     KeySchema:
        #       - AttributeName: "user_email"
        #         KeyType: "HASH"
        #     Projection:
        #       ProjectionType: "ALL"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
